__author__ = 'Maxim Vedernikov'

import random
import math

TSP_FILES_PATH = 'C:\\Users\\User\\Documents\\Concorde\\Here\\'

class MyGraph:
    def __init__(self):
        self.edges = {}
        self.nodes = {}
        self.nodes_count = 0

def get_dist(first_node, second_node):
    return round(math.sqrt((first_node[0] - second_node[0])**2 + (first_node[1] - second_node[1])**2))

def generate_graph(n):
    graph = MyGraph()
    for _ in range(n):
        new_node = (random.random() * 1000, random.random() * 1000)
        for index, node in graph.nodes.items():
            dist = get_dist(node, new_node)
            graph.edges[index, graph.nodes_count + 1] = (index, graph.nodes_count + 1, dist)
        graph.nodes[graph.nodes_count + 1] = new_node
        graph.nodes_count += 1
    return graph

def get_data_for_concorde(g):
    max_weight = 0
    for edge in g.edges:
        max_weight = max(g.edges[edge][2], max_weight)
    matrix = ""
    for i in range (1, g.nodes_count + 1):
        for j in range (1, g.nodes_count + 1):
            if (i, j) in g.edges:
                matrix += str(max_weight - g.edges[(i, j)][2]) + ' '
            elif (j, i) in g.edges:
                matrix += str(max_weight - g.edges[(j, i)][2]) + ' '
            else:
                matrix += '0 '
        matrix += '\n'
    tsp_file = '''NAME: concorde11
TYPE: TSP
COMMENT: Generated by CCutil_writetsplib
COMMENT: Write called for by Concorde GUI
EDGE_WEIGHT_TYPE : EXPLICIT
EDGE_WEIGHT_FORMAT : FULL_MATRIX
DIMENSION: ''' + str(g.nodes_count) + '\nEDGE_WEIGHT_SECTION\n' + matrix
    return (tsp_file)

def create_files(g, tsp_file, n, i):
    tsp_filename = TSP_FILES_PATH + str(g.nodes_count) + '_' + str(i) + '.tsp'
    with open(tsp_filename, 'w') as f:
        f.write(tsp_file)
    graph_filename = str(g.nodes_count) + '_' + str(i) + '.txt'
    with open(graph_filename, 'w') as f:
        f.write(str(g.nodes_count) + '\n')
        for i in range(1, g.nodes_count + 1):
            f.write(str(g.nodes[i]) + '\n')

def process(n, i):
    g = generate_graph(n)
    tsp_file = get_data_for_concorde(g)
    create_files(g, tsp_file, n, i)

if __name__ == '__main__':
    for n in []:
        for i in range(1, 1):
            process(n, i)
